{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/valentin/Documents/Proyects/pruebas/ReactNative/CUCEIEats/TEAM-SELLER/node_modules/react-navigation-header-buttons/src/HeaderButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nvar BUTTON_HIT_SLOP = {\n  top: 5,\n  bottom: 5,\n  left: 5,\n  right: 5\n};\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Touchable from 'react-native-platform-touchable';\nvar useForeground = Platform.OS === 'android' && TouchableNativeFeedback.canUseNativeForeground();\nexport var HeaderButton = function (_React$PureComponent) {\n  _inherits(HeaderButton, _React$PureComponent);\n\n  var _super = _createSuper(HeaderButton);\n\n  function HeaderButton() {\n    _classCallCheck(this, HeaderButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HeaderButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onPress = _this$props.onPress,\n          buttonWrapperStyle = _this$props.buttonWrapperStyle,\n          testID = _this$props.testID,\n          getButtonElement = _this$props.getButtonElement,\n          ButtonElementOverride = _this$props.ButtonElement,\n          background = _this$props.background,\n          iconName = _this$props.iconName,\n          title = _this$props.title,\n          buttonStyle = _this$props.buttonStyle,\n          IconComponent = _this$props.IconComponent,\n          iconSize = _this$props.iconSize,\n          color = _this$props.color,\n          other = _objectWithoutProperties(_this$props, [\"onPress\", \"buttonWrapperStyle\", \"testID\", \"getButtonElement\", \"ButtonElement\", \"background\", \"iconName\", \"title\", \"buttonStyle\", \"IconComponent\", \"iconSize\", \"color\"]);\n\n      var ButtonElement = ButtonElementOverride || getButtonElement({\n        iconName: iconName,\n        title: title,\n        buttonStyle: buttonStyle,\n        IconComponent: IconComponent,\n        iconSize: iconSize,\n        color: color\n      });\n      return React.createElement(Touchable, _extends({\n        useForeground: useForeground,\n        background: useForeground ? undefined : background,\n        foreground: useForeground ? background : undefined,\n        disabled: !onPress,\n        onPress: onPress,\n        hitSlop: BUTTON_HIT_SLOP,\n        style: [styles.buttonContainer, buttonWrapperStyle],\n        testID: testID\n      }, other, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, ButtonElement));\n    }\n  }]);\n\n  return HeaderButton;\n}(React.PureComponent);\nHeaderButton.defaultProps = {\n  background: Touchable.Ripple('rgba(0, 0, 0, .32)', true)\n};\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/valentin/Documents/Proyects/pruebas/ReactNative/CUCEIEats/TEAM-SELLER/node_modules/react-navigation-header-buttons/src/HeaderButton.js"],"names":["React","BUTTON_HIT_SLOP","top","bottom","left","right","Touchable","useForeground","Platform","OS","TouchableNativeFeedback","canUseNativeForeground","HeaderButton","props","onPress","buttonWrapperStyle","testID","getButtonElement","ButtonElementOverride","ButtonElement","background","iconName","title","buttonStyle","IconComponent","iconSize","color","other","undefined","styles","buttonContainer","PureComponent","defaultProps","Ripple","StyleSheet","create","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;;AAGA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAMC,eAAe,GAAG;AAAEC,EAAAA,GAAG,EAAE,CAAP;AAAUC,EAAAA,MAAM,EAAE,CAAlB;AAAqBC,EAAAA,IAAI,EAAE,CAA3B;AAA8BC,EAAAA,KAAK,EAAE;AAArC,CAAxB;;;;;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;AAWA,IAAMC,aAAa,GAAGC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BC,uBAAuB,CAACC,sBAAxB,EAAnD;AAyBA,WAAaC,YAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAKW;AAAA,wBAeH,KAAKC,KAfF;AAAA,UAELC,OAFK,eAELA,OAFK;AAAA,UAGLC,kBAHK,eAGLA,kBAHK;AAAA,UAILC,MAJK,eAILA,MAJK;AAAA,UAKLC,gBALK,eAKLA,gBALK;AAAA,UAMUC,qBANV,eAMLC,aANK;AAAA,UAOLC,UAPK,eAOLA,UAPK;AAAA,UAQLC,QARK,eAQLA,QARK;AAAA,UASLC,KATK,eASLA,KATK;AAAA,UAULC,WAVK,eAULA,WAVK;AAAA,UAWLC,aAXK,eAWLA,aAXK;AAAA,UAYLC,QAZK,eAYLA,QAZK;AAAA,UAaLC,KAbK,eAaLA,KAbK;AAAA,UAcFC,KAdE;;AAiBP,UAAMR,aAAa,GACjBD,qBAAqB,IACrBD,gBAAgB,CAAC;AAAEI,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,KAAK,EAALA,KAAZ;AAAmBC,QAAAA,WAAW,EAAXA,WAAnB;AAAgCC,QAAAA,aAAa,EAAbA,aAAhC;AAA+CC,QAAAA,QAAQ,EAARA,QAA/C;AAAyDC,QAAAA,KAAK,EAALA;AAAzD,OAAD,CAFlB;AAIA,aACE,oBAAC,SAAD;AACE,QAAA,aAAa,EAAEnB,aADjB;AAEE,QAAA,UAAU,EAAEA,aAAa,GAAGqB,SAAH,GAAeR,UAF1C;AAGE,QAAA,UAAU,EAAEb,aAAa,GAAGa,UAAH,GAAgBQ,SAH3C;AAIE,QAAA,QAAQ,EAAE,CAACd,OAJb;AAKE,QAAA,OAAO,EAAEA,OALX;AAME,QAAA,OAAO,EAAEb,eANX;AAOE,QAAA,KAAK,EAAE,CAAC4B,MAAM,CAACC,eAAR,EAAyBf,kBAAzB,CAPT;AAQE,QAAA,MAAM,EAAEC;AARV,SASMW,KATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAWE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOR,aAAP,CAXF,CADF;AAeD;AAzCH;;AAAA;AAAA,EAAkCnB,KAAK,CAAC+B,aAAxC;AAAanB,Y,CACJoB,Y,GAAe;AACpBZ,EAAAA,UAAU,EAAEd,SAAS,CAAC2B,MAAV,CAAiB,oBAAjB,EAAuC,IAAvC;AADQ,C;AA2CxB,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,eAAe,EAAE;AACfM,IAAAA,UAAU,EAAE,QADG;AAEfC,IAAAA,cAAc,EAAE;AAFD;AADc,CAAlB,CAAf","sourcesContent":["/**\n * @flow\n */\nimport * as React from 'react';\nconst BUTTON_HIT_SLOP = { top: 5, bottom: 5, left: 5, right: 5 };\nimport { StyleSheet, View, Platform, TouchableNativeFeedback } from 'react-native';\nimport Touchable from 'react-native-platform-touchable';\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\n\n// from <Item />\nexport type HeaderButtonProps = {\n  onPress: ?() => any,\n  buttonWrapperStyle?: ViewStyleProp,\n  ButtonElement?: React.Element<any>,\n  testID?: string,\n};\n\nconst useForeground = Platform.OS === 'android' && TouchableNativeFeedback.canUseNativeForeground();\n\n// props that pertain to styling of visible buttons\n// these are partially passed from <Item /> and partially supplied by you, the developer when you wrap <HeaderButton />\nexport type VisibleButtonProps = $Exact<{\n  iconName?: string,\n  title: string,\n  buttonStyle?: ViewStyleProp,\n\n  IconComponent?: React.ComponentType<any>,\n  iconSize?: number,\n  color?: string,\n}>;\n\ntype OtherProps = {\n  background: any,\n  getButtonElement: VisibleButtonProps => React.Element<any>,\n};\n\ntype Props = {\n  ...$Exact<HeaderButtonProps>,\n  ...$Exact<VisibleButtonProps>,\n  ...$Exact<OtherProps>,\n};\n\nexport class HeaderButton extends React.PureComponent<Props> {\n  static defaultProps = {\n    background: Touchable.Ripple('rgba(0, 0, 0, .32)', true),\n  };\n\n  render() {\n    const {\n      onPress,\n      buttonWrapperStyle,\n      testID,\n      getButtonElement,\n      ButtonElement: ButtonElementOverride,\n      background,\n      iconName,\n      title,\n      buttonStyle,\n      IconComponent,\n      iconSize,\n      color,\n      ...other\n    } = this.props;\n\n    const ButtonElement =\n      ButtonElementOverride ||\n      getButtonElement({ iconName, title, buttonStyle, IconComponent, iconSize, color });\n\n    return (\n      <Touchable\n        useForeground={useForeground}\n        background={useForeground ? undefined : background}\n        foreground={useForeground ? background : undefined}\n        disabled={!onPress}\n        onPress={onPress}\n        hitSlop={BUTTON_HIT_SLOP}\n        style={[styles.buttonContainer, buttonWrapperStyle]}\n        testID={testID}\n        {...other}\n      >\n        <View>{ButtonElement}</View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}