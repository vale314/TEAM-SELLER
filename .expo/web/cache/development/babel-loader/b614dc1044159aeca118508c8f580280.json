{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/valentin/Documents/Proyects/pruebas/ReactNative/CUCEIEats/TEAM-SELLER/components/ImagePicker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as Permissions from \"expo-permissions\";\nimport Colors from \"../constants/Colors\";\n\nvar ImgPicker = function ImgPicker(props) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      pickedImage = _useState2[0],\n      setPickedImage = _useState2[1];\n\n  var verifyPermissions = function verifyPermissions() {\n    var result;\n    return _regeneratorRuntime.async(function verifyPermissions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL, Permissions.CAMERA));\n\n          case 2:\n            result = _context.sent;\n\n            if (!(result.status !== \"granted\")) {\n              _context.next = 6;\n              break;\n            }\n\n            Alert.alert(\"Insufficient permissions!\", \"You need to grant camera permissions to use this app.\", [{\n              text: \"Okay\"\n            }]);\n            return _context.abrupt(\"return\", false);\n\n          case 6:\n            return _context.abrupt(\"return\", true);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n          case 2:\n            permissionResult = _context2.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context2.next = 6;\n              break;\n            }\n\n            alert(\"Permission to access camera roll is required!\");\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [3, 3],\n              quality: 1,\n              base64: true\n            }));\n\n          case 8:\n            pickerResult = _context2.sent;\n            props.onInputChange(props.id, pickerResult.base64, true);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    setPickedImage(props.value);\n    return function () {\n      setPickedImage(null);\n    };\n  }, [props.value]);\n  return React.createElement(View, {\n    style: styles.imagePicker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.imagePreview,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, !pickedImage ? React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Ingresa una foto\") : React.createElement(Image, {\n    style: styles.image,\n    source: {\n      uri: \"data:image/gif;base64,\" + props.value\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })), React.createElement(Button, {\n    title: \"Imagen\",\n    color: Colors.primary,\n    onPress: openImagePickerAsync,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  imagePicker: {\n    alignItems: \"center\"\n  },\n  imagePreview: {\n    width: \"100%\",\n    height: 200,\n    marginBottom: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderColor: \"#ccc\",\n    borderWidth: 1\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\nexport default ImgPicker;","map":{"version":3,"sources":["/Users/valentin/Documents/Proyects/pruebas/ReactNative/CUCEIEats/TEAM-SELLER/components/ImagePicker.js"],"names":["React","useState","useEffect","ImagePicker","Permissions","Colors","ImgPicker","props","pickedImage","setPickedImage","verifyPermissions","askAsync","CAMERA_ROLL","CAMERA","result","status","Alert","alert","text","openImagePickerAsync","requestCameraRollPermissionsAsync","permissionResult","granted","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","base64","pickerResult","onInputChange","id","value","styles","imagePicker","imagePreview","image","uri","primary","StyleSheet","create","alignItems","width","height","marginBottom","justifyContent","borderColor","borderWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { View, Button, Image, Text, StyleSheet, Alert } from \"react-native\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as Permissions from \"expo-permissions\";\n\nimport Colors from \"../constants/Colors\";\n\nconst ImgPicker = (props) => {\n  const [pickedImage, setPickedImage] = useState();\n\n  const verifyPermissions = async () => {\n    const result = await Permissions.askAsync(\n      Permissions.CAMERA_ROLL,\n      Permissions.CAMERA\n    );\n    if (result.status !== \"granted\") {\n      Alert.alert(\n        \"Insufficient permissions!\",\n        \"You need to grant camera permissions to use this app.\",\n        [{ text: \"Okay\" }]\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestCameraRollPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert(\"Permission to access camera roll is required!\");\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [3, 3],\n      quality: 1,\n      base64: true,\n    });\n    props.onInputChange(props.id, pickerResult.base64, true);\n  };\n\n  //   const takeImageHandler = async () => {\n  //     const hasPermission = await verifyPermissions();\n  //     if (!hasPermission) {\n  //       return;\n  //     }\n  //     const image = await ImagePicker.launchCameraAsync({\n  //       allowsEditing: true,\n  //       aspect: [16, 9],\n  //       quality: 0.5,\n  //     });\n\n  //     setPickedImage(image.uri);\n  //   };\n\n  useEffect(() => {\n    setPickedImage(props.value);\n    return () => {\n      setPickedImage(null);\n    };\n  }, [props.value]);\n\n  return (\n    <View style={styles.imagePicker}>\n      <View style={styles.imagePreview}>\n        {!pickedImage ? (\n          <Text>Ingresa una foto</Text>\n        ) : (\n          <Image\n            style={styles.image}\n            source={{ uri: `data:image/gif;base64,${props.value}` }}\n          />\n        )}\n      </View>\n      <Button\n        title=\"Imagen\"\n        color={Colors.primary}\n        onPress={openImagePickerAsync}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  imagePicker: {\n    alignItems: \"center\",\n  },\n  imagePreview: {\n    width: \"100%\",\n    height: 200,\n    marginBottom: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderColor: \"#ccc\",\n    borderWidth: 1,\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n});\n\nexport default ImgPicker;\n"]},"metadata":{},"sourceType":"module"}