{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var SET_BUYS = \"SET_BUYS\";\nimport CONFIG from \"../../config\";\nvar path = process.env.NODE_ENV == \"development\" ? CONFIG.development : CONFIG.deploy;\nexport var fetchBuys = function fetchBuys(email) {\n  return function _callee(dispatch) {\n    var response, resData, error, loadedBuys;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: SET_BUYS,\n              buys: []\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(path + \"/api/seller/buy\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email\n              })\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            resData = _context.sent;\n\n            if (!resData.error) {\n              _context.next = 10;\n              break;\n            }\n\n            error = resData.msg;\n            return _context.abrupt(\"return\", alert(\"Hay Un Error\", error));\n\n          case 10:\n            loadedBuys = resData.buys;\n            dispatch({\n              type: SET_BUYS,\n              buys: loadedBuys\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/valentin/Documents/Proyects/pruebas/ReactNative/CUCEIEats/TEAM-SELLER/store/actions/buy.js"],"names":["SET_BUYS","CONFIG","path","process","env","NODE_ENV","development","deploy","fetchBuys","email","dispatch","type","buys","fetch","method","headers","body","JSON","stringify","response","json","resData","error","msg","alert","loadedBuys"],"mappings":";AAAA,OAAO,IAAMA,QAAQ,GAAG,UAAjB;AAEP,OAAOC,MAAP;AAEA,IAAMC,IAAI,GACRC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,aAAxB,GAAwCJ,MAAM,CAACK,WAA/C,GAA6DL,MAAM,CAACM,MADtE;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAClC,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAELA,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEX,QADC;AAEPY,cAAAA,IAAI,EAAE;AAFC,aAAD,CAAR;AAFK;AAAA,6CAMkBC,KAAK,CAAIX,IAAJ,sBAA2B;AACrDY,cAAAA,MAAM,EAAE,MAD6C;AAErDC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAF4C;AAKrDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBT,gBAAAA,KAAK,EAAEA;AADY,eAAf;AAL+C,aAA3B,CANvB;;AAAA;AAMCU,YAAAA,QAND;AAAA;AAAA,6CAgBiBA,QAAQ,CAACC,IAAT,EAhBjB;;AAAA;AAgBCC,YAAAA,OAhBD;;AAAA,iBAiBDA,OAAO,CAACC,KAjBP;AAAA;AAAA;AAAA;;AAkBGA,YAAAA,KAlBH,GAkBWD,OAAO,CAACE,GAlBnB;AAAA,6CAqBIC,KAAK,CAAC,cAAD,EAAiBF,KAAjB,CArBT;;AAAA;AAwBDG,YAAAA,UAxBC,GAwBYJ,OAAO,CAACT,IAxBpB;AA0BLF,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEX,QADC;AAEPY,cAAAA,IAAI,EAAEa;AAFC,aAAD,CAAR;;AA1BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA+BD,CAhCM","sourcesContent":["export const SET_BUYS = \"SET_BUYS\";\n\nimport CONFIG from \"../../config\";\n\nconst path =\n  process.env.NODE_ENV == \"development\" ? CONFIG.development : CONFIG.deploy;\n\nexport const fetchBuys = (email) => {\n  return async (dispatch) => {\n    // any async code you want!\n    dispatch({\n      type: SET_BUYS,\n      buys: [],\n    });\n    const response = await fetch(`${path}/api/seller/buy`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n      }),\n    });\n\n    const resData = await response.json();\n    if (resData.error) {\n      const error = resData.msg;\n      // Dispatch error\n\n      return alert(\"Hay Un Error\", error);\n    }\n\n    var loadedBuys = resData.buys;\n\n    dispatch({\n      type: SET_BUYS,\n      buys: loadedBuys,\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}