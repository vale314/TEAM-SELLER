{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nexport var AUTHENTICATE = \"AUTHENTICATE\";\nexport var LOGOUT = \"LOGOUT\";\nexport var SET_DID_TRY_AL = \"SET_DID_TRY_AL\";\nimport CONFIG from \"../../config\";\nimport { alert } from \"./alert\";\nimport * as Permissions from \"expo-permissions\";\nvar path = process.env.NODE_ENV == \"development\" ? CONFIG.development : CONFIG.deploy;\nvar timer;\nexport var setDidTryAL = function setDidTryAL() {\n  return {\n    type: SET_DID_TRY_AL\n  };\n};\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(email, password, firstname, lastname, code, cellphone) {\n  return function _callee(dispatch) {\n    var response, resData, error, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (email.includes(\"udg.mx\")) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", alert(\"UDG Solamente\", \"Correo No Es Universitario\"));\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(path + \"/api/seller/new\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email,\n                user_password: password,\n                firstname: firstname,\n                lastname: lastname,\n                cellphone: cellphone,\n                code: code,\n                image: \"image\"\n              })\n            }));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            resData = _context.sent;\n\n            if (!resData.error) {\n              _context.next = 11;\n              break;\n            }\n\n            error = resData.msg;\n            return _context.abrupt(\"return\", alert(\"Hay Un Error\", error));\n\n          case 11:\n            dispatch(authenticate(resData.localId, resData.token, parseInt(resData.expires)));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expires));\n            saveDataToStorage(resData.token, resData.localId, expirationDate);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, resData, error, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (email.includes(\"udg.mx\")) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", alert(\"UDG Solamente\", \"Correo No Es Universitario\"));\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetch(path + \"/api/seller/login\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email,\n                user_password: password\n              })\n            }));\n\n          case 4:\n            response = _context2.sent;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            resData = _context2.sent;\n\n            if (!resData.error) {\n              _context2.next = 11;\n              break;\n            }\n\n            error = resData.msg;\n            return _context2.abrupt(\"return\", alert(\"Hay Un Error\", error));\n\n          case 11:\n            dispatch(authenticate(resData.localId, resData.token, parseInt(resData.expires)));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expires));\n            saveDataToStorage(resData.token, resData.localId, expirationDate);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem(\"userData\");\n  return {\n    type: LOGOUT\n  };\n};\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  AsyncStorage.setItem(\"userData\", JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};","map":{"version":3,"sources":["/Users/valentin/Documents/Proyects/pruebas/ReactNative/CUCEIEats/TEAM-SELLER/store/actions/auth.js"],"names":["AUTHENTICATE","LOGOUT","SET_DID_TRY_AL","CONFIG","alert","Permissions","path","process","env","NODE_ENV","development","deploy","timer","setDidTryAL","type","authenticate","userId","token","expiryTime","dispatch","setLogoutTimer","signup","email","password","firstname","lastname","code","cellphone","includes","fetch","method","headers","body","JSON","stringify","user_password","image","response","json","resData","error","msg","localId","parseInt","expires","expirationDate","Date","getTime","saveDataToStorage","login","Accept","logout","clearLogoutTimer","AsyncStorage","removeItem","clearTimeout","expirationTime","setTimeout","setItem","expiryDate","toISOString"],"mappings":"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","sourcesContent":["import { AsyncStorage } from \"react-native\";\n\n// export const SIGNUP = 'SIGNUP';\n// export const LOGIN = 'LOGIN';\nexport const AUTHENTICATE = \"AUTHENTICATE\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SET_DID_TRY_AL = \"SET_DID_TRY_AL\";\n\nimport CONFIG from \"../../config\";\n\nimport { alert } from \"./alert\";\n\nimport * as Permissions from \"expo-permissions\";\n\nconst path =\n  process.env.NODE_ENV == \"development\" ? CONFIG.development : CONFIG.deploy;\n\nlet timer;\n\nexport const setDidTryAL = () => {\n  return { type: SET_DID_TRY_AL };\n};\n\nexport const authenticate = (userId, token, expiryTime) => {\n  return (dispatch) => {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({ type: AUTHENTICATE, userId: userId, token: token });\n  };\n};\n\nexport const signup = (\n  email,\n  password,\n  firstname,\n  lastname,\n  code,\n  cellphone\n) => {\n  return async (dispatch) => {\n    if (!email.includes(\"udg.mx\")) {\n      return alert(\"UDG Solamente\", \"Correo No Es Universitario\");\n    }\n    const response = await fetch(`${path}/api/seller/new`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        user_password: password,\n        firstname: firstname,\n        lastname: lastname,\n        cellphone: cellphone,\n        code: code,\n        image: \"image\",\n      }),\n    });\n\n    const resData = await response.json();\n\n    if (resData.error) {\n      const error = resData.msg;\n      // Dispatch error\n\n      return alert(\"Hay Un Error\", error);\n    }\n\n    dispatch(\n      authenticate(resData.localId, resData.token, parseInt(resData.expires))\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expires)\n    );\n    saveDataToStorage(resData.token, resData.localId, expirationDate);\n  };\n};\n\nexport const login = (email, password) => {\n  return async (dispatch) => {\n    if (!email.includes(\"udg.mx\")) {\n      return alert(\"UDG Solamente\", \"Correo No Es Universitario\");\n    }\n\n    const response = await fetch(`${path}/api/seller/login`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        user_password: password,\n      }),\n    });\n\n    const resData = await response.json();\n\n    if (resData.error) {\n      const error = resData.msg;\n\n      return alert(\"Hay Un Error\", error);\n    }\n    dispatch(\n      authenticate(resData.localId, resData.token, parseInt(resData.expires))\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expires)\n    );\n    saveDataToStorage(resData.token, resData.localId, expirationDate);\n  };\n};\n\nexport const logout = () => {\n  clearLogoutTimer();\n  AsyncStorage.removeItem(\"userData\");\n  return { type: LOGOUT };\n};\n\nconst clearLogoutTimer = () => {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nconst setLogoutTimer = (expirationTime) => {\n  return (dispatch) => {\n    timer = setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nconst saveDataToStorage = (token, userId, expirationDate) => {\n  AsyncStorage.setItem(\n    \"userData\",\n    JSON.stringify({\n      token: token,\n      userId: userId,\n      expiryDate: expirationDate.toISOString(),\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}